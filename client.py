from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from config import Config
from database import Database

logger = logging.getLogger(__name__)

# States
SELECTING_CATEGORY, SELECTING_SERVICE, GETTING_PHONE, GETTING_NAME = range(4)

db = Database()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Check if user is admin
    if user_id in Config.ADMIN_IDS:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=ReplyKeyboardMarkup([['/admin']], resize_keyboard=True)
        )
        return

    # Regular user flow
    categories = db.get_all_categories()
    keyboard = [[category] for category in categories]
    keyboard.append(['–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª', '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'])
    keyboard.append(['–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏'])

    await update.message.reply_text(
        '–†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞ "–ù–æ–≥–æ—Ç–æ—á–∫–∏-–¢–æ—á–∫–∞"!',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    services = db.get_services_by_category(category)

    if not services:
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    keyboard = [[f"{service[1]} - {service[2]} —Ä—É–±."] for service in services]
    keyboard.append(['–ù–∞–∑–∞–¥'])

    context.user_data['selected_category'] = category
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service_name = update.message.text.split(' - ')[0]
    category = context.user_data.get('selected_category')

    services = db.get_services_by_category(category)
    selected_service = None

    for service in services:
        if service[1] == service_name:
            selected_service = service
            break

    if not selected_service:
        await update.message.reply_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    context.user_data['selected_service'] = {
        'id': selected_service[0],
        'name': selected_service[1],
        'price': selected_service[2],
        'duration': selected_service[3]
    }

    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_service[1]}\n"
        f"–¶–µ–Ω–∞: {selected_service[2]} —Ä—É–±.\n"
        f"–í—Ä–µ–º—è: {selected_service[3]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardRemove()
    )

    return GETTING_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data['phone'] = phone

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return GETTING_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    phone = context.user_data['phone']
    service = context.user_data['selected_service']
    category = context.user_data['selected_category']

    # Save client to database
    client_id = db.add_client(
        update.effective_user.id,
        name,
        phone,
        category,
        service['name'],
        service['price'],
        service['duration']
    )

    if client_id:
        # Notify admin
        for admin_id in Config.ADMIN_IDS:
            try:
                await context.bot.send_message(
                    admin_id,
                    f"üî• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å! üî•\n"
                    f"–ö–ª–∏–µ–Ω—Ç ‚Ññ {client_id}:\n"
                    f"–ò–º—è - {name}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω - {phone}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ - {category}\n"
                    f"–£—Å–ª—É–≥–∞ - {service['name']}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {service['price']} —Ä—É–±.\n"
                    f"–í—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ - {service['duration']}\n\n"
                    "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥!"
                )
            except Exception as e:
                logger.error(f"Error sending notification to admin {admin_id}: {e}")

        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "–ß–µ–º –µ—â—ë –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
            reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    return ConversationHandler.END

async def handle_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª' and Config.TELEGRAM_CHANNEL:
        await update.message.reply_text(f"–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: {Config.TELEGRAM_CHANNEL}")

    elif text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç' and Config.WEBSITE_URL:
        await update.message.reply_text(f"–ù–∞—à —Å–∞–π—Ç: {Config.WEBSITE_URL}")

    elif text == '–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏':
        if Config.LOCATION_COORDINATES:
            lat, lon = map(float, Config.LOCATION_COORDINATES)
            await update.message.reply_location(latitude=lat, longitude=lon)
        else:
            await update.message.reply_text("–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123")

    elif text == '–ù–∞–∑–∞–¥':
        categories = db.get_all_categories()
        keyboard = [[category] for category in categories]
        keyboard.append(['–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª', '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'])
        keyboard.append(['–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏'])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
    )
    return ConversationHandler.END
