from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
import re
from config import Config
from database import Database

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PHONE, NAME = range(2)

class ClientHandler:
    def __init__(self):
        self.db = Database()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if user_id in Config.ADMIN_IDS:
                await update.message.reply_text(
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                    reply_markup=ReplyKeyboardMarkup([['/admin']], resize_keyboard=True)
                )
                return

            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            welcome_text = "–†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞ \"–ù–æ–≥–æ—Ç–æ—á–∫–∏-–¢–æ—á–∫–∞\"!"
            keyboard = [
                ['–ú–∞–Ω–∏–∫—é—Ä', '–ü–µ–¥–∏–∫—é—Ä', '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ'],
                ['–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª', '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'],
                ['–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏']
            ]

            await update.message.reply_text(
                welcome_text,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def show_services(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            category_name = update.message.text
            categories = self.db.get_categories()

            # –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏
            category_id = None
            for cat_id, cat_name in categories:
                if cat_name == category_name:
                    category_id = cat_id
                    break

            if not category_id:
                await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            services = self.db.get_services_by_category(category_id)

            if not services:
                await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.")
                return

            keyboard = []
            for service in services:
                service_id, name, price, duration = service
                button_text = f"{name} - {price} —Ä—É–±. ({duration})"
                keyboard.append([button_text])

            keyboard.append(['–ù–∞–∑–∞–¥'])

            text = f"–£—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':\n\n"
            for service in services:
                service_id, name, price, duration = service
                text += f"‚Ä¢ {name} - {price} —Ä—É–±., {duration}\n"

            await update.message.reply_text(
                text,
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_services: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def start_appointment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            button_text = update.message.text
            match = re.search(r'(.+?) - (\d+) —Ä—É–±.', button_text)

            if match:
                service_name = match.group(1).strip()

                # –ù–∞—Ö–æ–¥–∏–º service_id –ø–æ –∏–º–µ–Ω–∏ —É—Å–ª—É–≥–∏
                services = []
                categories = self.db.get_categories()
                for cat_id, cat_name in categories:
                    cat_services = self.db.get_services_by_category(cat_id)
                    for service in cat_services:
                        if service[1] == service_name:
                            services.append(service)

                if services:
                    service_id = services[0][0]
                    context.user_data['service_id'] = service_id

                    await update.message.reply_text(
                        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                        reply_markup=ReplyKeyboardRemove()
                    )

                    return PHONE

            await update.message.reply_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏.")
            return ConversationHandler.END

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_appointment: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    async def get_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            phone = update.message.text
            context.user_data['phone'] = phone

            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

            return NAME

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ get_phone: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    async def get_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            name = update.message.text
            phone = context.user_data['phone']
            service_id = context.user_data['service_id']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø–∏—Å—å
            client_id = self.db.add_client(name, phone)
            appointment_id = self.db.add_appointment(client_id, service_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            service_info = self.db.get_service(service_id)

            if service_info:
                service_name, price, duration, category_name = service_info[1], service_info[2], service_info[3], service_info[4]

                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                await update.message.reply_text(
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å!\n\n"
                    f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                    f"‚Ä¢ –ò–º—è: {name}\n"
                    f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"‚Ä¢ –£—Å–ª—É–≥–∞: {service_name}\n"
                    f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n\n"
                    f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_message = (
                    f"üéâ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å! üéâ\n"
                    f"–ö–ª–∏–µ–Ω—Ç ‚Ññ {client_id}:\n"
                    f"–ò–º—è - {name}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω - {phone}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ - {category_name}\n"
                    f"–£—Å–ª—É–≥–∞ - {service_name}\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {price} —Ä—É–±.\n"
                    f"–í—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ - {duration}\n\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏!"
                )
                logger.info(admin_message)

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ get_name: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
        )
        return ConversationHandler.END

    async def show_telegram_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(f"üì¢ –ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: {Config.TELEGRAM_CHANNEL}")

    async def show_website(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(f"üåê –ù–∞—à —Å–∞–π—Ç: {Config.WEBSITE_URL}")

    async def show_address(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(f"üìç –ù–∞—à –∞–¥—Ä–µ—Å: {Config.MAP_COORDINATES}")

    async def back_to_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.start(update, context)
