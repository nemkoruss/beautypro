from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from config import config
from database import db

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PHONE, NAME = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in config.ADMIN_IDS:
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
        from admin import show_admin_menu
        return await show_admin_menu(update, context)

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        ['–ú–∞–Ω–∏–∫—é—Ä', '–ü–µ–¥–∏–∫—é—Ä'],
        ['–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ', '–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏'],
        ['–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª', '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç']
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    welcome_text = (
        "–†–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ –º–∞–Ω–∏–∫—é—Ä–∞ \"–ù–æ–≥–æ—Ç–æ—á–∫–∏-–¢–æ—á–∫–∞\"! üéâ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É:"
    )

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        await update.callback_query.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = update.message.text
    services = db.get_services_by_category(category)

    if not services:
        await update.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.")
        return

    keyboard = []
    for service in services:
        service_text = f"{service['name']} - {service['price']} —Ä—É–±., {service['duration']}"
        keyboard.append([service_text])

    keyboard.append(['–ù–∞–∑–∞–¥'])

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–£—Å–ª—É–≥–∏ {category}:", reply_markup=reply_markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['category'] = category

async def handle_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    service_text = update.message.text

    if service_text == '–ù–∞–∑–∞–¥':
        await show_main_menu(update, context)
        return

    # –ò—â–µ–º —É—Å–ª—É–≥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    services = db.get_services_by_category(context.user_data.get('category', ''))
    selected_service = None

    for service in services:
        service_display = f"{service['name']} - {service['price']} —Ä—É–±., {service['duration']}"
        if service_display == service_text:
            selected_service = service
            break

    if not selected_service:
        await update.message.reply_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
    context.user_data['selected_service'] = selected_service

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(phone_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é:",
        reply_markup=reply_markup
    )

    return PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not phone.replace('+', '').replace(' ', '').replace('-', '').isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return PHONE

    context.user_data['phone'] = phone

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )

    return NAME

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    name = update.message.text
    service = context.user_data.get('selected_service')
    phone = context.user_data.get('phone')
    user_id = update.effective_user.id

    if not all([service, phone, name]):
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    client_id = db.add_client(user_id, name, phone, service['id'])

    if client_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_message = (
            f"üéâ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å! –ö–ª–∏–µ–Ω—Ç ‚Ññ{client_id}:\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service['category']}\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {service['name']}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service['price']} —Ä—É–±.\n"
            f"‚è∞ –í—Ä–µ–º—è: {service['duration']}\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏!"
        )

        for admin_id in config.ADMIN_IDS:
            try:
                await context.bot.send_message(admin_id, admin_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
            "–¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–∑–∏—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    await show_main_menu(update, context)
    return ConversationHandler.END

async def handle_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    text = update.message.text

    if text == '–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏':
        if config.LOCATION_COORDINATES:
            try:
                lat, lon = map(float, config.LOCATION_COORDINATES.split(','))
                await update.message.reply_location(latitude=lat, longitude=lon)
                await update.message.reply_text("üìç –ù–∞—à –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ:")
            except:
                await update.message.reply_text("–ê–¥—Ä–µ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        else:
            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    elif text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª':
        if config.TELEGRAM_CHANNEL:
            await update.message.reply_text(f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É: {config.TELEGRAM_CHANNEL}")
        else:
            await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    elif text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
        if config.WEBSITE_URL:
            await update.message.reply_text(f"–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç: {config.WEBSITE_URL}")
        else:
            await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    elif text == '–ü–æ–∑–≤–æ–Ω–∏—Ç—å':
        if config.PHONE_NUMBER:
            await update.message.reply_text(f"–ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {config.PHONE_NUMBER}")
        else:
            await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_main_menu(update, context)
    return ConversationHandler.END

# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∑–∞–ø–∏—Å–∏
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex(r'.* - \d+ —Ä—É–±., .*'), handle_service_selection)],
    states={
        PHONE: [MessageHandler(filters.CONTACT | filters.TEXT & ~filters.COMMAND, handle_phone)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
    },
    fallbacks=[MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel)]
)
