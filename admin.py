from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from config import Config
from database import Database

logger = logging.getLogger(__name__)

# Admin states
ADMIN_MAIN, SELECT_CATEGORY, SELECT_SERVICE, EDIT_SERVICE, ADD_SERVICE_CATEGORY, ADD_SERVICE_NAME, ADD_SERVICE_PRICE, ADD_SERVICE_DURATION = range(8)

db = Database()

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in Config.ADMIN_IDS:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    keyboard = [
        ['–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É', '–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
        ['–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'],
        ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏'],
        ['–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏']
    ]

    await update.message.reply_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ADMIN_MAIN

async def handle_admin_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == '–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É':
        categories = db.get_all_categories()
        keyboard = [[category] for category in categories]
        keyboard.append(['–ù–∞–∑–∞–¥'])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SELECT_CATEGORY

    elif choice == '–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É':
        categories = db.get_all_categories()
        keyboard = [[category] for category in categories]
        keyboard.append(['–ù–∞–∑–∞–¥'])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SELECT_CATEGORY

    elif choice == '–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É':
        categories = db.get_all_categories()
        keyboard = [[category] for category in categories]
        keyboard.append(['–ù–∞–∑–∞–¥'])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ADD_SERVICE_CATEGORY

    elif choice == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
        )
        # This would need additional implementation for broadcasting

    elif choice == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤':
        clients = db.get_all_clients()
        if clients:
            message = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
            for client in clients:
                message += f"ID: {client[0]}\n–ò–º—è: {client[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {client[2]}\n–£—Å–ª—É–≥–∞: {client[4]} ({client[3]})\n–¶–µ–Ω–∞: {client[5]} —Ä—É–±.\n–î–∞—Ç–∞: {client[7]}\n–°—Ç–∞—Ç—É—Å: {client[8]}\n\n"
            await update.message.reply_text(message[:4000])
        else:
            await update.message.reply_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    elif choice == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏':
        clients = db.get_recent_clients(30)
        if clients:
            message = "üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
            for client in clients:
                message += f"ID: {client[0]}\n–ò–º—è: {client[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {client[2]}\n–£—Å–ª—É–≥–∞: {client[4]} ({client[3]})\n–¶–µ–Ω–∞: {client[5]} —Ä—É–±.\n–î–∞—Ç–∞: {client[7]}\n–°—Ç–∞—Ç—É—Å: {client[8]}\n\n"
            await update.message.reply_text(message[:4000])
        else:
            await update.message.reply_text("–ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç.")

    elif choice == '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏':
        await update.message.reply_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    context.user_data['admin_category'] = category

    services = db.get_services_by_category(category)
    keyboard = [[service[1]] for service in services]
    keyboard.append(['–ù–∞–∑–∞–¥'])

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return SELECT_SERVICE

async def handle_service_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service_name = update.message.text
    category = context.user_data['admin_category']

    services = db.get_services_by_category(category)
    selected_service = None

    for service in services:
        if service[1] == service_name:
            selected_service = service
            break

    if not selected_service:
        await update.message.reply_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ADMIN_MAIN

    context.user_data['admin_service'] = selected_service

    await update.message.reply_text(
        f"–£—Å–ª—É–≥–∞: {selected_service[1]}\n"
        f"–¶–µ–Ω–∞: {selected_service[2]} —Ä—É–±.\n"
        f"–í—Ä–µ–º—è: {selected_service[3]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    return EDIT_SERVICE

async def edit_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text
    context.user_data['new_service_name'] = new_name

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:")
    return EDIT_SERVICE

async def add_service_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    context.user_data['new_service_category'] = category

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏:")
    return ADD_SERVICE_NAME

async def add_service_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data['new_service_name'] = name

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:")
    return ADD_SERVICE_PRICE

async def add_service_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = int(update.message.text)
        context.user_data['new_service_price'] = price

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2 —á–∞—Å–∞'):")
        return ADD_SERVICE_DURATION
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
        return ADD_SERVICE_PRICE

async def add_service_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    duration = update.message.text
    category = context.user_data['new_service_category']
    name = context.user_data['new_service_name']
    price = context.user_data['new_service_price']

    if db.add_service(category, name, price, duration):
        await update.message.reply_text("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")

    return ConversationHandler.END

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([['/admin']], resize_keyboard=True)
    )
    return ConversationHandler.END
