from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from config import Config
from database import Database

logger = logging.getLogger(__name__)

class AdminHandler:
    def __init__(self):
        self.db = Database()

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in Config.ADMIN_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        keyboard = [
            ['–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ó–∞–ø–∏—Å–∏ –∑–∞ 30 –¥–Ω–µ–π'],
            ['–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]

        await update.message.reply_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

    async def show_clients(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in Config.ADMIN_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        clients = self.db.get_clients()

        if not clients:
            await update.message.reply_text("–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        response = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
        for client in clients:
            response += f"‚Ä¢ ID: {client['id']}, –ò–º—è: {client['name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {client['phone']}, –î–∞—Ç–∞: {client['created_at']}\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        for i in range(0, len(response), 4000):
            await update.message.reply_text(response[i:i+4000])

    async def show_appointments(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in Config.ADMIN_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        appointments = self.db.get_appointments_last_30_days()

        if not appointments:
            await update.message.reply_text("–ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç.")
            return

        response = "üìÖ –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
        for app in appointments:
            response += f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç: {app['name']}, –¢–µ–ª: {app['phone']}, –£—Å–ª—É–≥–∞: {app['service_name']}, –¶–µ–Ω–∞: {app['price']} —Ä—É–±., –î–∞—Ç–∞: {app['created_at']}\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        for i in range(0, len(response), 4000):
            await update.message.reply_text(response[i:i+4000])

    async def back_to_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.admin_panel(update, context)
